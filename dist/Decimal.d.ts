import { DecimalComparisonResult, DecimalInfo, DecimalLike, DecimalSign } from './common';
export default class Decimal implements DecimalInfo {
    static readonly ZERO: Decimal;
    static readonly ONE: Decimal;
    static readonly MINUS_ONE: Decimal;
    readonly length: number;
    readonly scale: number;
    readonly value: Uint8Array;
    readonly sign: DecimalSign;
    private constructor();
    add(value: DecimalLike, scale?: number): Decimal;
    subtract(value: DecimalLike, scale?: number): Decimal;
    multiply(value: DecimalLike, scale?: number): Decimal;
    divide(value: DecimalLike, scale?: number): Decimal;
    raise(value: DecimalLike, scale?: number): Decimal;
    modulo(value: DecimalLike, scale?: number): Decimal;
    divideModulo(value: DecimalLike, scale?: number): [Decimal, Decimal];
    compareTo(value: DecimalLike): DecimalComparisonResult;
    isEqualTo(value: DecimalInfo): boolean;
    isGreaterThan(value: DecimalInfo): boolean;
    isGreaterThanOrEqualTo(value: DecimalLike): boolean;
    isLowerThan(value: DecimalInfo): boolean;
    isLowerThanOrEqualTo(value: DecimalLike): boolean;
    isZero(): boolean;
    isOne(): boolean;
    isMinusOne(): boolean;
    negate(): Decimal;
    isNegative(): boolean;
    isPositive(): boolean;
    toString(): string;
    toInt(): number;
    toFloat(): number;
    toFixed(scale: number): string;
    static max(...values: DecimalLike[]): Decimal;
    static min(...values: DecimalLike[]): Decimal;
    static fromString(decimalString: string): Decimal;
    static fromInfo(value: DecimalInfo): Decimal;
    static fromNumber(value: number): Decimal;
    static from(value: DecimalLike): Decimal;
    static isDecimal(value: any): value is Decimal;
    static isDecimalLike(value: any): value is DecimalLike;
}
